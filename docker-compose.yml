services:
  web:
    container_name: web
    build:
      context: ./web
      dockerfile: Dockerfile
    ports:
      - "${FLASK_PORT}:5000"
      - "5678:5678"
    networks:
      - mobik_weather_app_net
    env_file:
      - .env
    volumes:
      - ./web:/app
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy

  consumer:
    container_name: consumer
    build: 
      context: ./consumer
      dockerfile: ./build/Dockerfile
    ports:
      - "${CONSUMER_PORT}:5000"
    networks:
      - mobik_weather_app_net
    env_file:
      - .env
    volumes:
      - ./consumer:/app
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./rabbitmq-definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - mobik_weather_app_net
    environment:
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbitmq_management load_definitions '/etc/rabbitmq/definitions.json'"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - mobik_weather_app_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

networks:
  mobik_weather_app_net:
    driver: bridge
